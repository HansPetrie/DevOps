{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Cross-Stack Reference Sample Template: Demonstrates how to reference resources from a different stack. This template provisions an EC2 instance in an EC2 Security Group provisioned in a different stack. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "NetworkStackName": {
      "Description": "Name of an active CloudFormation stack that contains the networking resources, such as the subnet and security group, that will be used in this stack.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "SampleNetworkConfiguration"
    }
  },
  "Resources": {
    "NetworkInfo": {
      "Type": "Custom::NetworkInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName": {
          "Ref": "NetworkStackName"
        }
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RDSDBinstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "MultiAZ": "true",
        "DBSecurityGroups": [
          {
            "Ref": "RDSSecurityGroup"
          }
        ],
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.m3.medium",
        "Engine": "MySQL",
        "MasterUsername": "root",
        "MasterUserPassword": "password",
        "DBSubnetGroupName": {
          "Ref": "RDSDBSubnetGroup"
        },
        "DBName": "wordpress"
      },
      "DeletionPolicy": "Snapshot"
    },
    "RDSDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "description",
        "SubnetIds": [
          {
            "Fn::GetAtt": [
              "NetworkInfo",
              "PrivateSubnet1ID"
            ]
          },
          {
            "Fn::GetAtt": [
              "NetworkInfo",
              "PrivateSubnet2ID"
            ]
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "EC2VpcId": {
          "Fn::GetAtt": [
            "NetworkInfo",
            "VPCID"
          ]
        },
        "GroupDescription": "Allow RDSAccess SecurityGroup access to RDS DB",
        "DBSecurityGroupIngress": [
          {
            "EC2SecurityGroupId": {
              "Fn::GetAtt": [
                "NetworkInfo",
                "SGRDSAccess"
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "DBEndpoint": {
      "Description": "The endpoint of the database",
      "Value": {
        "Fn::GetAtt": [
          "RDSDBinstance",
          "Endpoint.Address"
        ]
      }
    },
    "RDSID": {
      "Description": "The instane id of the RDS database",
      "Value": {
        "Ref": "RDSDBinstance"
      }
    }
  }
}
